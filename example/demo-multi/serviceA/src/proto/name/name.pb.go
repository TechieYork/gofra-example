// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/proto/name/name.proto

/*
Package tencent_user_name is a generated protocol buffer package.

It is generated from these files:
	src/proto/name/name.proto

It has these top-level messages:
	AddNameRequest
	AddNameResponse
*/
package tencent_user_name

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddNameRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *AddNameRequest) Reset()                    { *m = AddNameRequest{} }
func (m *AddNameRequest) String() string            { return proto.CompactTextString(m) }
func (*AddNameRequest) ProtoMessage()               {}
func (*AddNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AddNameResponse struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *AddNameResponse) Reset()                    { *m = AddNameResponse{} }
func (m *AddNameResponse) String() string            { return proto.CompactTextString(m) }
func (*AddNameResponse) ProtoMessage()               {}
func (*AddNameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddNameResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*AddNameRequest)(nil), "tencent.user.name.AddNameRequest")
	proto.RegisterType((*AddNameResponse)(nil), "tencent.user.name.AddNameResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NameService service

type NameServiceClient interface {
	// Sends a greeting
	AddName(ctx context.Context, in *AddNameRequest, opts ...grpc.CallOption) (*AddNameResponse, error)
}

type nameServiceClient struct {
	cc *grpc.ClientConn
}

func NewNameServiceClient(cc *grpc.ClientConn) NameServiceClient {
	return &nameServiceClient{cc}
}

func (c *nameServiceClient) AddName(ctx context.Context, in *AddNameRequest, opts ...grpc.CallOption) (*AddNameResponse, error) {
	out := new(AddNameResponse)
	err := grpc.Invoke(ctx, "/tencent.user.name.NameService/AddName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NameService service

type NameServiceServer interface {
	// Sends a greeting
	AddName(context.Context, *AddNameRequest) (*AddNameResponse, error)
}

func RegisterNameServiceServer(s *grpc.Server, srv NameServiceServer) {
	s.RegisterService(&_NameService_serviceDesc, srv)
}

func _NameService_AddName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).AddName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tencent.user.name.NameService/AddName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).AddName(ctx, req.(*AddNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tencent.user.name.NameService",
	HandlerType: (*NameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddName",
			Handler:    _NameService_AddName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/proto/name/name.proto",
}

func init() { proto.RegisterFile("src/proto/name/name.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0x2e, 0x4a, 0xd6,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0xcf, 0x4b, 0xcc, 0x4d, 0x05, 0x13, 0x7a, 0x60, 0xbe, 0x90,
	0x60, 0x49, 0x6a, 0x5e, 0x72, 0x6a, 0x5e, 0x89, 0x5e, 0x69, 0x71, 0x6a, 0x91, 0x1e, 0x48, 0x42,
	0x49, 0x85, 0x8b, 0xcf, 0x31, 0x25, 0xc5, 0x2f, 0x31, 0x37, 0x35, 0x28, 0xb5, 0xb0, 0x34, 0xb5,
	0xb8, 0x44, 0x48, 0x88, 0x8b, 0x05, 0x24, 0x23, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0x66,
	0x2b, 0xa9, 0x72, 0xf1, 0xc3, 0x55, 0x15, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x62, 0x53, 0x66, 0x94,
	0xc8, 0xc5, 0x0d, 0x52, 0x13, 0x9c, 0x5a, 0x54, 0x96, 0x99, 0x9c, 0x2a, 0x14, 0xc4, 0xc5, 0x0e,
	0xd5, 0x25, 0xa4, 0xa8, 0x87, 0x61, 0xb5, 0x1e, 0xaa, 0xbd, 0x52, 0x4a, 0xf8, 0x94, 0x40, 0x2c,
	0x55, 0x62, 0x48, 0x62, 0x03, 0xfb, 0xc4, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xdc, 0xa7, 0xe2,
	0x02, 0xe6, 0x00, 0x00, 0x00,
}
